"use strict";(self.webpackChunkwemogy=self.webpackChunkwemogy||[]).push([[721],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=s(n),f=i,g=l["".concat(u,".").concat(f)]||l[f]||d[f]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c[l]="string"==typeof e?e:i,o[1]=c;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2494:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return s}});var r=n(3117),i=(n(7294),n(3905));const a={},o="Refit",c={unversionedId:"refit",id:"refit",title:"Refit",description:"Why",source:"@site/docs-general/refit.md",sourceDirName:".",slug:"/refit",permalink:"/refit",draft:!1,editUrl:"https://github.com/wemogy/libs-core/edit/main/docs/docs-general/refit.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JWT",permalink:"/jwt"}},u={},s=[{value:"Why",id:"why",level:2},{value:"How to use",id:"how-to-use",level:2},{value:"Add an Refit API to your dependency container",id:"add-an-refit-api-to-your-dependency-container",level:3},{value:"Add insecure logging",id:"add-insecure-logging",level:3},{value:"Add Bearer token authentication",id:"add-bearer-token-authentication",level:3}],p={toc:s},l="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(l,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"refit"},"Refit"),(0,i.kt)("h2",{id:"why"},"Why"),(0,i.kt)("p",null,"We created an abstraction for the ",(0,i.kt)("strong",{parentName:"p"},"Refit")," library, because we want to make the usage of the library more simple and unify the way how we use the library."),(0,i.kt)("h2",{id:"how-to-use"},"How to use"),(0,i.kt)("h3",{id:"add-an-refit-api-to-your-dependency-container"},"Add an Refit API to your dependency container"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Startup.cs"',title:'"Startup.cs"'},'services\n  // introduce a new API like `api.github.com`\n  .AddRefitApi(new Uri("https://base-address-of-your-api.com"))\n  // and add interfaces where the routes are defined\n  .WithApiInterface<IUserApi>();\n  .WithApiInterface<IResourceApi>();\n')),(0,i.kt)("p",null,"For the definition of the interfaces, see the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/reactiveui/refit"},"Refit Documentation")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="IResourceApi.cs"',title:'"IResourceApi.cs"'},'public interface IResourceApi\n{\n    [Get("/resources")]\n    public Task<List<Resource>> GetAllAsync();\n\n    [Get("/resources/{id}")]\n    public Task<Resource> GetAsync(string id);\n}\n')),(0,i.kt)("h3",{id:"add-insecure-logging"},"Add insecure logging"),(0,i.kt)("p",null,"For debugging purpose it can be helpful to see the requests and responses. To enable this feature just call ",(0,i.kt)("inlineCode",{parentName:"p"},"WithInsecureLogging()")," right after ",(0,i.kt)("inlineCode",{parentName:"p"},"AddRefitApi()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Startup.cs"',title:'"Startup.cs"'},'services\n  .AddRefitApi(new Uri("https://base-address-of-your-api.com"))\n  .WithInsecureLogging()\n  .WithApiInterface<ISampleApi>()\n')),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Make sure the you have a LoggerFactory in your dependency container, because internally we log into ",(0,i.kt)("inlineCode",{parentName:"p"},"ILogger<>")," instance.")),(0,i.kt)("h3",{id:"add-bearer-token-authentication"},"Add Bearer token authentication"),(0,i.kt)("p",null,"For authentication purposes it is necessary to add a Bearer token to each request. To do this, call ",(0,i.kt)("inlineCode",{parentName:"p"},"WithBearerToken()")," right after ",(0,i.kt)("inlineCode",{parentName:"p"},"AddRefitApi()"),". As argument you just pass a getter function that returns the Bearer token."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Startup.cs"',title:'"Startup.cs"'},'serviceCollection\n  .AddRefitApi(new Uri("https://base-address-of-your-api.com"))\n  .WithBearerToken(() => "ey1234...")\n')))}d.isMDXComponent=!0}}]);